{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","useEffect","axios","get","then","res","name","email","role","balance","login_email","setLogin","login_password","setPassword","LoginError","setLoginError","onSubmitForm","e","a","preventDefault","post","password","console","log","message","signup_email","setSemail","signup_password","setSpassword","date","setDate","useForm","register","handleSubmit","errors","href","action","onSubmit","type","placeholder","value","onChange","target","signupData","dob","noValidate","alert","JSON","stringify","TextField","variant","margin","inputRef","validate","required","fullWidth","id","label","autoComplete","autoFocus","error","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.54d6fd76.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { useForm } from \"react-hook-form\";\n\nimport axios from \"axios\";\nimport { set } from \"mongoose\";\n\nfunction App() {\n  //user fetch\n  const [data, setData] = useState({});\n\n  useEffect(\n    () => {\n      axios.get(\"/api/current_user\").then((res) => {\n        setData(res.data);\n      });\n    },\n    { data }\n  );\n\n  //data from user fetch\n  const { name, email, balance, role } = data;\n\n  //login form\n  const [login_email, setLogin] = useState(\"\");\n  const [login_password, setPassword] = useState(\"\");\n  const [LoginError, setLoginError] = useState(\"\");\n  const onSubmitForm = async (e) => {\n    e.preventDefault();\n\n    const res = await axios.post(\"/api/login\", {\n      email: login_email,\n      password: login_password,\n    });\n    console.log(res.data.message);\n    setLoginError(res.data.message);\n  };\n\n  //sign up form\n  const [signup_email, setSemail] = useState(\"\");\n  const [signup_password, setSpassword] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  const signupSubmit = (e) => {\n    e.preventDefault();\n    const signupData = {\n      name: \"test\",\n      email: signup_email,\n      password: signup_password,\n      dob: date,\n    };\n    axios.post(\"/api/signup\", signupData).then((res) => console.log(res));\n  };\n\n  //react-hook-form\n  const { register, handleSubmit, errors } = useForm();\n\n  //render\n  if (data) {\n    if (role) {\n      return <div>MOD PAGE</div>;\n    } else {\n      return (\n        <div>\n          <span>{name + email}</span>\n          <a href=\"/api/logout\">\n            {\" \"}\n            <button>log out</button>\n          </a>\n        </div>\n      );\n    }\n  } else {\n    return (\n      <div>\n        {LoginError}\n        <form action=\"\" onSubmit={onSubmitForm}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"email\"\n            value={login_email}\n            onChange={(e) => setLogin(e.target.value)}\n          ></input>\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            value={login_password}\n            onChange={(e) => setPassword(e.target.value)}\n          ></input>\n          <button type=\"submit\">log in</button>\n        </form>\n        <a href=\"/auth/google\">\n          <button> google oauth</button>\n        </a>\n        <br></br>\n        signup\n        <form onSubmit={signupSubmit}>\n          <input\n            type=\"email\"\n            name=\"s_email\"\n            value={signup_email}\n            onChange={(e) => {\n              setSemail(e.target.value);\n            }}\n          ></input>\n          <input\n            name=\"s_password\"\n            value={signup_password}\n            onChange={(e) => {\n              setSpassword(e.target.value);\n            }}\n          ></input>\n          <input\n            type=\"date\"\n            value={date}\n            onChange={(e) => {\n              setDate(e.target.value);\n            }}\n          ></input>\n          <button type=\"submit\">Sign up</button>\n        </form>\n        <form\n          noValidate\n          onSubmit={handleSubmit((data) => alert(JSON.stringify(data)))}\n        >\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            inputRef={register({\n              validate: async (value) => {\n                const res = await axios.post(\"/api/check_email\", {\n                  email: value,\n                });\n\n                return res === 200;\n              },\n            })}\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            error={errors.email ? true : false}\n          />\n          {errors.email && \"Email already exist\"}\n\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Sign up\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}